@tool
extends ShaderMaterial
class_name VFEZMaterial

enum RecompileCodeSourceEnum
{
	CurrentShader = 0,
	OriginalTemplate = 1,
}

enum BlendModeEnum
{
	Mix = 0,
	Add = 1,
	Subtract = 2,
	Multiply = 3,
	Premultiplied_Alpha= 4
}

enum DepthDrawModeEnum
{
	Opaque = 0,
	Always = 1,
	Never = 2
}

enum CullModeEnum
{
	Back = 0,
	Front = 1,
	Disabled = 2
}

enum DiffuseModeEnum
{
	Lambert = 0,
	Lambert_Wrap = 1,
	Burley = 2,
	Toon = 3,
}

enum SpecularModeEnum
{
	Schlick_Ggx = 0,
	Toon = 1,
	Disabled = 2
}

enum ShadingModeEnum
{
	Unshaded = 0,
	Shaded = 1
}

enum BillboardModeEnum
{
	Disabled = 0,
	Enabled = 1,
	Y = 2,
	Particle = 3,
}

@export var RecompileCodeSource: RecompileCodeSourceEnum

@export_group("Render Options")
@export var BlendMode: BlendModeEnum:
	get:
		return _blendMode
	set(value):
		_blendMode = value
		_update_shader_code_definition("BLEND_MODE", int(value))

@export var DepthDrawMode: DepthDrawModeEnum:
	get:
		return _depthDrawMode
	set(value):
		_depthDrawMode = value
		_update_shader_code_definition("DEPTH_DRAW_MODE", int(value))

@export var CullMode: CullModeEnum:
	get:
		return _cullMode
	set(value):
		_cullMode = value
		_update_shader_code_definition("CULL_MODE", int(value))

@export var DiffuseMode: DiffuseModeEnum:
	get:
		return _diffuseMode
	set(value):
		_diffuseMode = value
		_update_shader_code_definition("DIFFUSE_MODE", int(value))

@export var SpecularMode: SpecularModeEnum:
	get:
		return _specularMode
	set(value):
		_specularMode = value
		_update_shader_code_definition("SPECULAR_MODE", int(value))

@export var ShadingMode: ShadingModeEnum:
	get:
		return _shadingMode
	set(value):
		_shadingMode = value
		_update_shader_code_definition("SHADING_MODE", int(value))

@export var NoDepthTest: bool:
	get: 
		return _noDepthTest
	set(value):
		_noDepthTest = value
		_update_shader_code_definition("NO_DEPTH_TEST", int(value))
		
@export var BillboardMode: BillboardModeEnum:
	get: 
		return _billboardMode
	set(value):
		_billboardMode = value
		_update_shader_code_definition("BILLBOARD", int(value))
		if int(value) == 3:
			_update_shader_code_definition("PARTICLE_OPTIONS", 1)
		else:
			_update_shader_code_definition("PARTICLE_OPTIONS", 0)			
			
@export var BillboardKeepScale: bool:
	get: 
		return _billboardKeepScale
	set(value):
		_billboardKeepScale = value
		_update_shader_code_definition("BILLBOARD_KEEP_SCALE", int(value))

var _blendMode: BlendModeEnum
var _depthDrawMode: DepthDrawModeEnum
var _cullMode: CullModeEnum
var _diffuseMode: DiffuseModeEnum
var _specularMode: SpecularModeEnum
var _shadingMode: ShadingModeEnum
var _billboardMode: BillboardModeEnum
var _billboardKeepScale: bool
var _noDepthTest: bool

# handle shader parameters get 
#func _get(property):
	#if property.begins_with("shader_parameter/"):
		#return get_shader_parameter(property)

# handle shader parameters set
# if use_X is set enable reveland #define option to enable effect
func _set(property, value):
	if property.begins_with("shader_parameter/"):
		set_shader_parameter(property.replace("shader_parameter/", ""), value)
		if property.begins_with("shader_parameter/use_"):
			var define_option: String = \
				property.replace("shader_parameter/use_", "").to_upper()
			if value == null:
				value = 0
			#print(define_option, " ", value)
			_update_shader_code_definition(define_option, value)

func _update_shader_code_definition(define_option: String, value_to_set: int):
	if not Engine.is_editor_hint():
		return
		
	# if recompile source is current shader, then just change the specified define_option
	if RecompileCodeSource == RecompileCodeSourceEnum.CurrentShader:
		var updated_shader_code = _replace_define_option_in_shader_code(
			shader.code, define_option, value_to_set)
		shader = Shader.new()
		shader.code = updated_shader_code
	# if recompile source is template shader
	elif RecompileCodeSource == RecompileCodeSourceEnum.OriginalTemplate:
		_update_shader_code_from_template_base()

# find a define options inside the shader and replace its value
# with the specified value_to_set
func _replace_define_option_in_shader_code(
	shader_code: String,
	define_option: String, 
	value_to_set: int) -> String:
	var definition_pattern: String = "#define " + define_option
	var definition_pattern_start_pos: int = shader_code.find(definition_pattern)
	
	# if not found dont make any chages
	if definition_pattern_start_pos < 0:
		return shader_code
	
	# get string to replace + 2 slots for the current value
	var pattern_to_replace = shader_code.substr(
		definition_pattern_start_pos, 
		len(definition_pattern) + 2)
	
	var updated_shader_code: String = shader_code.replace(
		pattern_to_replace,
		definition_pattern + " " + str(value_to_set))
	
	return updated_shader_code

func _update_shader_code_from_template_base():
	if not Engine.is_editor_hint():
		return
	
	var template_header = """
// This shader was dynamically generated by the VFEZ material.
//
// **********************************
// Every change to the VFEZ material Render Options or 
// Include Options generates a new shader. After every change
// you can click on the new exported shader in the editor to view
// the latest changes. Only the definitions (#define) actually change.
// **********************************
// 
"""
	var base_dir_name = get_script().get_path().get_base_dir()
	var shader_template = load(base_dir_name + "/vfez_template.gdshader")
	var template_code: String = shader_template.code
	
	# set all render options based on their current values
	template_code = _replace_define_option_in_shader_code(
		template_code, "BLEND_MODE", _blendMode)
	template_code = _replace_define_option_in_shader_code(
		template_code, "DEPTH_DRAW_MODE", _depthDrawMode)
	template_code = _replace_define_option_in_shader_code(
		template_code, "CULL_MODE", _cullMode)
	template_code = _replace_define_option_in_shader_code(
		template_code, "DIFFUSE_MODE", _diffuseMode)
	template_code = _replace_define_option_in_shader_code(
		template_code, "SPECULAR_MODE", _specularMode)
	template_code = _replace_define_option_in_shader_code(
		template_code, "SHADING_MODE", _shadingMode)
	template_code = _replace_define_option_in_shader_code(
		template_code, "BILLBOARD", _billboardMode)
	template_code = _replace_define_option_in_shader_code(
		template_code, "BILLBOARD_KEEP_SCALE", _billboardKeepScale)
	template_code = _replace_define_option_in_shader_code(
		template_code, "NO_DEPTH_TEST", _noDepthTest)
	
	# set all shader options based on their current values
	for uniform in shader_template.get_shader_uniform_list():
		var uniform_name: String = uniform["name"]
		# if start with use_ there is a potential define option
		if uniform_name.begins_with("use_"):
			var shader_parameter = get_shader_parameter(uniform_name)
			#var shader_parameter = _get("shader_parameter/" + uniform_name)
			# if there is already a shader, set the saved value, else set 0				
			var value_to_set: int = 0
			if shader_parameter != null:
				value_to_set = int(shader_parameter)
			var potential_define_option = uniform_name.replace("use_", "").to_upper()
						
			template_code = _replace_define_option_in_shader_code(
				template_code, 
				potential_define_option,
				value_to_set)
				
	shader = Shader.new()
	shader.code = template_header + template_code

func _init() -> void:	
	if Engine.is_editor_hint():
		_update_shader_code_from_template_base()
