@tool
extends ShaderMaterial
class_name VFEZMaterial2D

# VFEZ material 2D render options properties
# Empty options are treated as boolean properties
var render_options: Dictionary[String, String] = \
	{
		"BlendMode" : "Mix,Add,Subtract,Multiply,Premultiplied_Alpha",
		"LightMode" : "Normal,Unshaded,LightOnly",
	}

# VFEZ material 2D render option definitions to set inside the shader
# Empty options mean nothing is set inside the shader
var render_options_definitions: Dictionary[String, Array] =\
	{
		"BlendMode" : ["BLEND_MIX", "BLEND_ADD", "BLEND_SUB", "BLEND_MUL", "BLEND_PREMUL_ALPHA"],
		"LightMode" : ["", "UNSHADED", "LIGHT_ONLY"],
	}

# VFEZ material saved render option values
var render_options_values: Dictionary[String, int]
	
# handle property gets. 
# if is shader property get it from shader
# if is render property get it from the material
func _get(property):
	if property.begins_with("shader_parameter/"):
		return get_shader_parameter(property.replace("shader_parameter/", ""))
	elif property in render_options.keys():
		if property not in render_options_values.keys():
			render_options_values[property] = 0
		return render_options_values[property]
	
# handle property gets. 
# if is shader property set it in shader 
# and if it starts with use_ update shader code to include new definitions
# if is render property set new value and update shader code
func _set(property, value):
	if property.begins_with("shader_parameter/"):
		set_shader_parameter(property.replace("shader_parameter/", ""), value)
		if property.begins_with("shader_parameter/use_"):
			_update_shader_code()
	elif property in render_options.keys():
		render_options_values[property] = int(value)
		_update_shader_code()

# create properties for all render options
func _get_property_list() -> Array[Dictionary]:
	var properties: Array[Dictionary] = []
	
	# create render options group
	properties.append(
		{
			"name" : "Render Options",
			"type" : TYPE_NIL,
			"usage" : PROPERTY_USAGE_GROUP
		}
	)
	
	for render_option_property in render_options.keys():
		var render_option_enum_hint: String = render_options[render_option_property]

		# if option enum hint is empty then treat it as a boolean property
		if render_option_enum_hint == "":
			properties.append(
				{
					"name": render_option_property,
					"type": TYPE_BOOL,
					"usage": PROPERTY_USAGE_DEFAULT,
				}
			)
			
		# if option enum hint exists, treat is as enum property
		else:
			properties.append(
				{
					"name": render_option_property,
					"type": TYPE_INT,
					"usage": PROPERTY_USAGE_DEFAULT,
					"hint": PROPERTY_HINT_ENUM,
					"hint_string": render_option_enum_hint
				}
			)
	
	return properties	

# update shader code to include new option definitions
func _update_shader_code():
	if not Engine.is_editor_hint():
		return
	
	var template_header = """
// This shader was dynamically generated by the VFEZ material.
//
// **********************************
// Every change to the VFEZ material Render Options or 
// Include Options generates a new shader. After every change
// you can click on the new exported shader in the editor to view
// the latest changes. Only the definitions (#define) actually change.
// **********************************
// 
"""
	# find current directory name and create absolute include path for template shader
	var base_dir_name = get_script().get_path().get_base_dir()
	var shader_include_str: String = "#include \"" + base_dir_name + "/Shaders/vfez_2d_template.gdshaderinc\"\n"
	var template_code: String = "shader_type canvas_item;\n"
	
	# we duplicate the shader, else the code bugs 
	# if the generated shader is open in the editor
	shader = shader.duplicate()
	# initialize the shader code with the included shader template. 
	# This is necessary to be able to read the shader uniforms later.
	shader.code = template_code + shader_include_str
	
	# set all render option definitions
	for render_option_3d in render_options.keys():
		# if render option is not initialized, initialize it to 0
		if render_option_3d not in render_options_values.keys():
			render_options_values[render_option_3d] = 0
		
		# get definition tags to write inside the shader
		var option_value: int = render_options_values[render_option_3d]
		var definition_tags: String = render_options_definitions[render_option_3d][option_value]
		# if tags are empty ignore, else write them inside shader
		if definition_tags != "":
			# split by "," to get all valid definitions to write inside the shader
			var definition_tag_array: PackedStringArray = definition_tags.split(",")
			for definition_tag in definition_tag_array:
				template_code += "#define " + definition_tag
				template_code += "\n"
	
	# set all shader definition options based on the relevant use_X uniform values
	for uniform in shader.get_shader_uniform_list():
		var uniform_name: String = uniform["name"]
		
		# if start with use_ there is a relevant define options
		if uniform_name.begins_with("use_"):
			var shader_parameter = get_shader_parameter(uniform_name)
			# if use_ shader parameter is true (1) then set the define option
			# to enable the effect	
			if shader_parameter != null && int(shader_parameter) == 1:
				var define_option = uniform_name.replace("use_", "").to_upper()
				template_code += "#define %s\n" % define_option
	
	# update final code to include description template, the define options 
	# and the shader include string at the end
	shader.code = template_header + template_code + shader_include_str

func _init() -> void:	
	if Engine.is_editor_hint():
		shader = Shader.new()
		shader.resource_name = "VFEZ2DPreview"
		_update_shader_code()
