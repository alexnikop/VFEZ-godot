@tool
extends ShaderMaterial
class_name VFEZMaterial2D

enum BlendModeEnum
{
	Mix = 0,
	Add = 1,
	Subtract = 2,
	Multiply = 3,
	Premultiplied_Alpha= 4
}

enum ShadingModeEnum
{
	Unshaded = 0,
	Shaded = 1
}

enum BillboardModeEnum
{
	Disabled = 0,
	Enabled = 1,
	Y = 2,
	Particle = 3,
}

@export_group("Render Options")
@export var BlendMode: BlendModeEnum:
	get:
		return _blendMode
	set(value):
		_blendMode = value
		_update_shader_code_from_template_base()

@export var ShadingMode: ShadingModeEnum:
	get:
		return _shadingMode
	set(value):
		_shadingMode = value
		_update_shader_code_from_template_base()

@export var NoDepthTest: bool:
	get: 
		return _noDepthTest
	set(value):
		_noDepthTest = value
		_update_shader_code_from_template_base()
		
@export var BillboardMode: BillboardModeEnum:
	get: 
		return _billboardMode
	set(value):
		_billboardMode = value
		if int(value) == 3:
			_billboard_particle_options = true
		else:
			_billboard_particle_options = false
		_update_shader_code_from_template_base()

@export var BillboardKeepScale: bool:
	get: 
		return _billboardKeepScale
	set(value):
		_billboardKeepScale = value
		_update_shader_code_from_template_base()

var _blendMode: BlendModeEnum
var _shadingMode: ShadingModeEnum
var _billboardMode: BillboardModeEnum
var _billboardKeepScale: bool
var _noDepthTest: bool
var _billboard_particle_options: bool

# handle shader parameters get 
#func _get(property):
	#if property.begins_with("shader_parameter/"):
		#return get_shader_parameter(property)

# handle shader parameters set
# if use_X is set enable reveland #define option to enable effect
func _set(property, value):
	if property.begins_with("shader_parameter/"):
		set_shader_parameter(property.replace("shader_parameter/", ""), value)
		if property.begins_with("shader_parameter/use_"):
			_update_shader_code_from_template_base()
	#else:
		#match property:
			#"BlendMode":
				#_blendMode = value
			
func _update_shader_code_from_template_base():
	if not Engine.is_editor_hint():
		return
	
	
	var template_header = """
// This shader was dynamically generated by the VFEZ material.
//
// **********************************
// Every change to the VFEZ material Render Options or 
// Include Options generates a new shader. After every change
// you can click on the new exported shader in the editor to view
// the latest changes. Only the definitions (#define) actually change.
// **********************************
// 
"""
	var base_dir_name = get_script().get_path().get_base_dir()
	#var shader_template = load(base_dir_name + "/Shaders/vfez_3d_template.gdshaderinc")
	var shader_include_str: String = "#include \"" + base_dir_name + "/Shaders/vfez_2d_template.gdshaderinc\"\n"
	var template_code: String = "shader_type canvas_item;\n"
	
	# we duplicate the shader, else the code bugs if the generated shader is open in the editor
	shader = shader.duplicate()
	shader.code = template_code + shader_include_str
	
	match _blendMode:
		BlendModeEnum.Mix:
			template_code += "#define BLEND_MIX"
		BlendModeEnum.Add:
			template_code += "#define BLEND_ADD"
		BlendModeEnum.Subtract:
			template_code += "#define BLEND_SUB"
		BlendModeEnum.Multiply:
			template_code += "#define BLEND_MUL"
		BlendModeEnum.Premultiplied_Alpha:
			template_code += "#define BLEND_PREMUL_ALPHA"
	
	template_code += "\n"
	
	if _billboard_particle_options:	
		template_code += "#define PARTICLE_OPTIONS\n"
		
	if _shadingMode == ShadingModeEnum.Unshaded:
		template_code += "#define UNSHADED\n"
	
	match _billboardMode:
		BillboardModeEnum.Enabled:
			template_code += "#define BILLBOARD_ENABLED"
		BillboardModeEnum.Y:
			template_code += "#define BILLBOARD_Y"
		BillboardModeEnum.Particle:
			template_code += "#define BILLBOARD_PARTICLE"
			
	if _billboardMode != BillboardModeEnum.Disabled:
		template_code += "\n"
		
	if _billboardKeepScale:
		template_code += "#define BILLBOARD_KEEP_SCALE\n"
	
	if _noDepthTest:
		template_code += "#define NO_DEPTH_TEST\n"
	
	# set all shader options based on their current values
	for uniform in shader.get_shader_uniform_list():
		var uniform_name: String = uniform["name"]
		
		# if start with use_ there is a potential define option
		if uniform_name.begins_with("use_"):
			var shader_parameter = get_shader_parameter(uniform_name)
			#var shader_parameter = _get("shader_parameter/" + uniform_name)
			# if there is already a shader, set the saved value, else set 0				
			if shader_parameter != null && int(shader_parameter) == 1:
				var define_option = uniform_name.replace("use_", "").to_upper()
				template_code += "#define %s\n" % define_option
			
	shader.code = template_header + template_code + shader_include_str

func _init() -> void:	
	if Engine.is_editor_hint():
		shader = Shader.new()
		shader.resource_name = "DontOpenMaterialWillBug"
		_update_shader_code_from_template_base()
